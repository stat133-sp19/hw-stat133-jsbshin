library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(binomial)
aux
library(binomial)
library(binomial)
bin_mo
library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(devtools)
devtools::document()
devtools::document()
library(testthat)
library(binomial)
test_check("binomial")
context("test checker functions")
# test check_prob() function
test_that("test that check_prob works",{
expect_true(check_prob(0.5))
expect_length(check_prob(0.5),1)
expect_error(check_prob(2), 'invalid prob value')
expect_error(check_prob(-1), 'invalid prob value')
})
check_prob(0.5)
test_that("test that check_trials works",{
expect_true(check_trials(7))
expect_length(check_trials(7),1)
expect_error(check_trials(0), 'invalid trials value')
expect_error(check_trials(-1), 'invalid trials value')
})
test_that("test that check_trials works",{
expect_true(check_trials(7))
expect_length(check_trials(7),1)
expect_error(check_trials(3.5), 'invalid trial value')
expect_error(check_trials(-1), 'invalid trial value')
})
check_trials()
check_trials(3.5)
library(binomial)
devtools::document()
test_that("test that check_trials works",{
expect_true(check_trials(7))
expect_length(check_trials(7),1)
expect_error(check_trials(3.5), 'invalid trial value')
expect_error(check_trials(-1), 'invalid trial value')
})
test_that("test that check_trials works",{
expect_true(check_trials(7))
expect_length(check_trials(7),1)
expect_error(check_trials(3.5), 'invalid trials value')
expect_error(check_trials(-1), 'invalid trials value')
})
library(testthat)
library(binomial)
test_check("binomial")
library(testthat)
library(binomial)
test_check("binomial")
library(testthat)
library(binomial)
test_check("binomial")
library(testthat)
library(binomial)
test_check("binomial")
check_trials(5.4)
# test check_success() function
test_that("test that check_success works",{
expect_true(check_success(2,5))
expect_error(check_success(10,5),'success cannot be greater than trials')
expect_error(check_success(1.1,2), 'invalid success value')
}
)
# test check_success() function
test_that("test that check_success works",{
expect_true(check_success(2,5))
expect_error(check_success(10,5),'success can not be greater than trials')
expect_error(check_success(1.1,2), 'invalid success value')
}
)
test_that("test that check_success works",{
expect_true(check_success(4,9))
expect_error(check_success(10,9),'success can not be greater than trials')
expect_error(check_success(2.3,3), 'invalid success value')
}
)
check_success()
# test check_success() function
test_that("test that check_success works",{
expect_true(check_success(4,9))
expect_error(check_success(10,9),'success can not be greater than trials')
expect_error(check_success(2.3,3), 'invalid success value')
expect_error(check_success(2,3.4), 'invalid success value')
}
test_that("test that check_success works",{
expect_true(check_success(4,9))
expect_length( check_success(3,5),1)
expect_error(check_success(10,9),'success can not be greater than trials')
expect_error(check_success(2.3,3), 'invalid success value')
}
)
test_that("test that check_success works",{
expect_true(check_success(4,9))
expect_length(check_success(3,5),1)
expect_error(check_success(10,9),'success can not be greater than trials')
expect_error(check_success(2.3,3), 'invalid success value')
}
)
library(binomial)
library(binomial)
aux_mean
library(binomial)
?binomial
library(binomial)
aux_mean
# private auxiliary function aux_mean() to compute the mean value
aux_mean <- function(trials, prob) {
aux_mean <- trials * prob
return(aux_mean)
}
# private auxiliary function aux_variance() to compute the variance value
aux_variance <- function(trials, prob) {
aux_variance <- trials * prob * (1 - prob)
return(aux_variance)
}
# private auxiliary function aux_mode() to measure the most likely number of success
aux_mode <- function(trials, prob) {
m <- trials * prob  + prob
if (m %% 1 == 0) {
aux_mode <- c(m, m-1)
return(aux_mode)
}else {
aux_mode <- as.integer(m)
return(aux_mode)
}
}
# private auxiliary function aux_skewness() to compute the measure of the asymmetry of the probability distribution of a random variable about its mean
aux_skewness <- function(trials, prob) {
aux_skewness <- (1 - 2 * prob) / sqrt(trials * prob * (1 - prob))
return(aux_skewness)
}
# private auxiliary function aux_kurtosis() to compute the  measure of the "tailedness" of the probability distribution of a random variable
aux_kurtosis <- function(trials, prob) {
aux_kurtosis <- (1 - 6 * prob * (1 - prob)) / (trials * prob * (1 - prob))
return(aux_kurtosis)
}
library(binomial)
library(binomial)
library(binomial)
devtools::document()
library(binomial)
# test aux_mean() function
test_that("test that aux_mean works",{
expect_equal(aux_mean(10, 0.3), 3)
expect_equal(aux_mean(100, 0.5), 50)
expect_equal(aux_mean(10, 0.1), 1)
})
library(testthat)
# test aux_mean() function
test_that("test that aux_mean works",{
expect_equal(aux_mean(10, 0.3), 3)
expect_equal(aux_mean(100, 0.5), 50)
expect_equal(aux_mean(10, 0.1), 1)
})
check_prob
library(binomial)
check_prob
devtools::document()
# test aux_mean() function
test_that("test that aux_mean works",{
expect_equal(aux_mean(10, 0.5), 5)
expect_equal(aux_mean(100, 0.5), 50)
expect_equal(aux_mean(10, 0.1), 1)
expect_error(aux_mean())
})
binomial:
df
test_that("test that aux_mean works",{
expect_equal(aux_mean(10, 0.5), 5)
expect_equal(aux_mean(100, 0.3), 30)
expect_equal(aux_mean(1000, 0.1), 100)
expect_error(aux_mean('ab', 0.3))
})
# test aux_mean() function
test_that("test that aux_mean works",{
expect_equal(aux_mean(10, 0.5), 5)
expect_equal(aux_mean(100, 0.3), 30)
expect_equal(aux_mean(1000, 0.1), 100)
expect_error(aux_mean(100, 0.1), 100)
expect_error(aux_mean('a', 0.3))
})
expect_error(aux_mean(100, 0.1), 100)
aux_mean(100, 0.1)
test_that("test that aux_mean works",{
expect_equal(aux_mean(10, 0.5), 5)
expect_equal(aux_mean(100, 0.3), 30)
expect_equal(aux_mean(1000, 0.1), 100)
expect_error(aux_mean(100, 0.1))
expect_error(aux_mean('a', 0.3))
})
aux_variance(10, 0.5)
aux_variance(100, 0.5)
aux_variance(100, 0.3)
aux_variance(-3, 0.3)
expect_error(aux_variance('a', 0.3))
expect_equal(aux_variance(1000, 0.1), 100)
test_that("test that aux_variance works",{
expect_equal(aux_variance(10, 0.5), 2.5)
expect_equal(aux_variance(100, 0.3), 21)
expect_equal(aux_variance(1000, 0.1), 90)
expect_error(aux_variance('a', 0.3))
})
# test aux_variance() function
test_that("test that aux_variance works",{
expect_equal(aux_variance(10, 0.5), 2.5)
expect_equal(aux_variance(100, 0.3), 21)
expect_equal(aux_variance(1000, 0.1), 90)
expect_error(aux_variance('a', 0.3))
expect_length(aux_variance(10,0.5),1)
expect_is(aux_variance(10,0.5),'numeric')
})
aux_mode(9, 0.5)
expect_length(aux_mode(9,0.5),1)
aux_mode(10, 0.5)
aux_mode(100, 0.3)
# test aux_mode() function
test_that("test that aux_mode works",{
expect_equal(aux_mode(10, 0.5), 5)
expect_equal(aux_mode(100, 0.3), 30)
expect_equal(aux_mode(1000, 0.1), 100)
expect_error(aux_mode('a', 0.3))
expect_length(aux_mode(10,0.5),1)
expect_is(aux_mode(10,0.5),'numeric')
expect_error(length(aux_mode(9, 0.5)), 1)
})
expect_is(aux_mode(10,0.5),'numeric')
expect_is(aux_variance(10,0.5),'numeric')
aux_mode(10,0.5)
typeof(aux_mode(10,0.5))
typeof(aux_variance(10,0.5))
expect_is(aux_mode(10,0.5),'numeric')
expect_is(aux_mode(10,0.5),'numeric')
expect_is(aux_mode(10,0.5),'numeric')
length(aux_mode(9, 0.5))
aux_skewness(10, 0.5)
aux_skewness(10, 0.3)
x2 <- pi * 100^(-1:3)
x2
round(x2, 3)
signif(x2, 3)
signif(0.2760262,3)
(signif(aux_skewness(10,0.3),3)
d
(signif(aux_skewness(10,0.3),3))
# test aux_skewness() function
test_that("test that aux_mode works",{
expect_equal(aux_skewness(10, 0.5), 0.2760262)
expect_equal(aux_skewness(100, 0.3), 30)
expect_error(aux_skewness('a', 0.3))
expect_length(aux_skewness(10, 0.3),1)
})
# test aux_skewness() function
test_that("test that aux_mode works",{
expect_equal(aux_skewness(10, 0.5), 0)
expect_equal(aux_skewness(10, 0.3), 0.2760262)
expect_error(aux_skewness('a', 0.3))
expect_length(aux_skewness(10, 0.3),1)
})
aux_skewness(10, 0.3)
expect_equal(aux_skewness(10, 0.3), 0.2760262)
# test aux_skewness() function
test_that("test that aux_mode works",{
expect_equal(aux_skewness(10, 0.5), 0)
expect_equal(signif(aux_skewness(10, 0.3),3), signif(0.2760262,3))
expect_error(aux_skewness('a', 0.3))
expect_length(aux_skewness(10, 0.3),1)
})
expect_equal(aux_kurtosis(10, 0.3),-0.1238095)
aux_kurtosis(10, 0.3)
aux_kurtosis(10, 0.5)
expect_equal(aux_kurtosis(10, 0.5),-0.2)
expect_equal(aux_kurtosis(10, 0.5),-0.2)
expect_equal(signif(aux_kurtosis(10, 0.3),3), signif(-0.1238095,3))
context("test auxiliary functions")
# test aux_mean() function
test_that("test that aux_mean works",{
expect_equal(aux_mean(10, 0.5), 5)
expect_equal(aux_mean(100, 0.3), 30)
expect_equal(aux_mean(1000, 0.1), 100)
expect_error(aux_mean('a', 0.3))
expect_length(aux_mean(10,0.5),1)
expect_is(aux_mean(10,0.5),'numeric')
})
# test aux_variance() function
test_that("test that aux_variance works",{
expect_equal(aux_variance(10, 0.5), 2.5)
expect_equal(aux_variance(100, 0.3), 21)
expect_equal(aux_variance(1000, 0.1), 90)
expect_error(aux_variance('a', 0.3))
expect_length(aux_variance(10,0.5),1)
})
# test aux_mode() function
test_that("test that aux_mode works",{
expect_equal(aux_mode(10, 0.5), 5)
expect_equal(aux_mode(100, 0.3), 30)
expect_equal(aux_mode(1000, 0.1), 100)
expect_error(aux_mode('a', 0.3))
expect_length(aux_mode(10, 0.5),1)
expect_length(aux_mode(11, 0.5),2)
})
# test aux_skewness() function
test_that("test that aux_skewness works",{
expect_equal(aux_skewness(10, 0.5), 0)
expect_equal(signif(aux_skewness(10, 0.3),3), signif(0.2760262,3))
expect_error(aux_skewness('a', 0.3))
expect_length(aux_skewness(10, 0.3),1)
})
# test aux_kurtosis() function
test_that("test that aux_kurtosis works",{
expect_equal(aux_kurtosis(10, 0.5),-0.2)
expect_equal(signif(aux_kurtosis(10, 0.3),3), signif(-0.1238095,3))
expect_error(aux_kurtosis('a', 0.3))
expect_length(aux_kurtosisde(10, 0.3),1)
})
# test aux_kurtosis() function
test_that("test that aux_kurtosis works",{
expect_equal(aux_kurtosis(10, 0.5),-0.2)
expect_equal(signif(aux_kurtosis(10, 0.3),3), signif(-0.1238095,3))
expect_error(aux_kurtosis('a', 0.3))
expect_length(aux_kurtosisde(10, 0.3),1)
})
context("test auxiliary functions")
# test aux_mean() function
test_that("test that aux_mean works",{
expect_equal(aux_mean(10, 0.5), 5)
expect_equal(aux_mean(100, 0.3), 30)
expect_equal(aux_mean(1000, 0.1), 100)
expect_error(aux_mean('a', 0.3))
expect_length(aux_mean(10,0.5),1)
expect_is(aux_mean(10,0.5),'numeric')
})
# test aux_variance() function
test_that("test that aux_variance works",{
expect_equal(aux_variance(10, 0.5), 2.5)
expect_equal(aux_variance(100, 0.3), 21)
expect_equal(aux_variance(1000, 0.1), 90)
expect_error(aux_variance('a', 0.3))
expect_length(aux_variance(10,0.5),1)
})
# test aux_mode() function
test_that("test that aux_mode works",{
expect_equal(aux_mode(10, 0.5), 5)
expect_equal(aux_mode(100, 0.3), 30)
expect_equal(aux_mode(1000, 0.1), 100)
expect_error(aux_mode('a', 0.3))
expect_length(aux_mode(10, 0.5),1)
expect_length(aux_mode(11, 0.5),2)
})
# test aux_skewness() function
test_that("test that aux_skewness works",{
expect_equal(aux_skewness(10, 0.5), 0)
expect_equal(signif(aux_skewness(10, 0.3),3), signif(0.2760262,3))
expect_error(aux_skewness('a', 0.3))
expect_length(aux_skewness(10, 0.3),1)
})
# test aux_kurtosis() function
test_that("test that aux_kurtosis works",{
expect_equal(aux_kurtosis(10, 0.5),-0.2)
expect_equal(signif(aux_kurtosis(10, 0.3),3), signif(-0.1238095,3))
expect_error(aux_kurtosis('a', 0.3))
expect_length(aux_kurtosisd(10, 0.3),1)
})
context("test auxiliary functions")
# test aux_mean() function
test_that("test that aux_mean works",{
expect_equal(aux_mean(10, 0.5), 5)
expect_equal(aux_mean(100, 0.3), 30)
expect_equal(aux_mean(1000, 0.1), 100)
expect_error(aux_mean('a', 0.3))
expect_length(aux_mean(10,0.5),1)
expect_is(aux_mean(10,0.5),'numeric')
})
# test aux_variance() function
test_that("test that aux_variance works",{
expect_equal(aux_variance(10, 0.5), 2.5)
expect_equal(aux_variance(100, 0.3), 21)
expect_equal(aux_variance(1000, 0.1), 90)
expect_error(aux_variance('a', 0.3))
expect_length(aux_variance(10,0.5),1)
})
# test aux_mode() function
test_that("test that aux_mode works",{
expect_equal(aux_mode(10, 0.5), 5)
expect_equal(aux_mode(100, 0.3), 30)
expect_equal(aux_mode(1000, 0.1), 100)
expect_error(aux_mode('a', 0.3))
expect_length(aux_mode(10, 0.5),1)
expect_length(aux_mode(11, 0.5),2)
})
# test aux_skewness() function
test_that("test that aux_skewness works",{
expect_equal(aux_skewness(10, 0.5), 0)
expect_equal(signif(aux_skewness(10, 0.3),3), signif(0.2760262,3))
expect_error(aux_skewness('a', 0.3))
expect_length(aux_skewness(10, 0.3),1)
})
# test aux_kurtosis() function
test_that("test that aux_kurtosis works",{
expect_equal(aux_kurtosis(10, 0.5),-0.2)
expect_equal(signif(aux_kurtosis(10, 0.3),3), signif(-0.1238095,3))
expect_error(aux_kurtosis('a', 0.3))
expect_length(aux_kurtosis(10, 0.3),1)
})
devtools::document()
binomial::aux_kurtosis()
getwd()
??binomial
Binomial
?Binomial
?binomial
devtools::check_man()
devtools::test()
devtools::install()
library(testthat)
library(binomial)
test_check("binomial")
bin_choose(5, 0)
expect_is(bin_choose(5, 0),'numeric')
expect_error(bin_choose('a', 0.3))
expect_length(bin_choose(5, 0),1)
expect_is(bin_choose(5, 0),'numeric')
bin_choose(5, 1)
bin_choose(5, 3)
expect_error(bin_choose(4,3), "k cannot be greater than n")
expect_error(bin_choose(3,4), "k cannot be greater than n")
expect_equal(bin_probability(2, 5, 0.5), 0.3125)
expect_is(bin_probability(2, 5, 0.5),'numeric')
expect_length(bin_probability(2, 5, 0.5),1)
expect_length(bin_probability(0:3, 5, 0.5),4)
expect_is(bin_probability(2, 5, 0.5),'numeric')
expect_equal(bin_probability(55, 100, 0.45),0.01075277)
# test bin_probability function
test_that("test that bin_choose works",{
expect_equal(bin_probability(2, 5, 0.5), 0.3125)
expect_equal(bin_probability(55, 100, 0.45),0.01075277)
expect_error(bin_probability('a', 0.3))
expect_length(bin_probability(2, 5, 0.5),1)
expect_length(bin_probability(0:3, 5, 0.5),4)
expect_is(bin_probability(2, 5, 0.5),'numeric')
})
expect_is(bin_distribution(2, 5, 0.5),'numeric')
bin_distribution(5,0.5)
length(bin_distribution(5,0.5))
expect_error(bin_distribution('a', 0.3))
expect_equal(bin_distribution(5,0.5), "bindis")
expect_is(bin_distribution(5,0.5), 'bindis')
expect_is(bin_distribution(5,0.5), 'data.frame')
test_that("test that bin_distribution works",{
expect_is(bin_distribution(5,0.5), 'bindis')
expect_is(bin_distribution(5,0.5), 'data.frame')
expect_error(bin_distribution(-4,0.5))
expect_length(bin_distribution(0:3, 5, 0.5),4)
})
# test bin_distribution function
test_that("test that bin_distribution works",{
expect_is(bin_distribution(5,0.5), 'bindis')
expect_is(bin_distribution(5,0.5), 'data.frame')
expect_error(bin_distribution(-4,0.5))
expect_length(bin_distribution(5,0.5),2)
})
expect_length(bin_cumulative(5,0.5),3)
bin_cumulative(5,0.5)
# test bin_cumulative function
test_that("test that bin_cumulative works",{
expect_is(bin_cumulative(5,0.5), 'bincum')
expect_is(bin_cumulative(5,0.5), 'data.frame')
expect_error(bin_cumulative(-4,0.5))
expect_length(bin_cumulative(5,0.5),3)
})
devtools::document()
devtools::check_man()
devtools::test()
knitr::opts_chunk$set(collapse = T, comment = "#>")
library(binomial)
