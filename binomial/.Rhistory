library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(binomial)
aux
library(binomial)
library(binomial)
bin_mo
library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(binomial)
library(devtools)
devtools::document()
devtools::document()
library(testthat)
library(binomial)
test_check("binomial")
context("test checker functions")
# test check_prob() function
test_that("test that check_prob works",{
expect_true(check_prob(0.5))
expect_length(check_prob(0.5),1)
expect_error(check_prob(2), 'invalid prob value')
expect_error(check_prob(-1), 'invalid prob value')
})
check_prob(0.5)
test_that("test that check_trials works",{
expect_true(check_trials(7))
expect_length(check_trials(7),1)
expect_error(check_trials(0), 'invalid trials value')
expect_error(check_trials(-1), 'invalid trials value')
})
test_that("test that check_trials works",{
expect_true(check_trials(7))
expect_length(check_trials(7),1)
expect_error(check_trials(3.5), 'invalid trial value')
expect_error(check_trials(-1), 'invalid trial value')
})
check_trials()
check_trials(3.5)
library(binomial)
devtools::document()
test_that("test that check_trials works",{
expect_true(check_trials(7))
expect_length(check_trials(7),1)
expect_error(check_trials(3.5), 'invalid trial value')
expect_error(check_trials(-1), 'invalid trial value')
})
test_that("test that check_trials works",{
expect_true(check_trials(7))
expect_length(check_trials(7),1)
expect_error(check_trials(3.5), 'invalid trials value')
expect_error(check_trials(-1), 'invalid trials value')
})
library(testthat)
library(binomial)
test_check("binomial")
library(testthat)
library(binomial)
test_check("binomial")
library(testthat)
library(binomial)
test_check("binomial")
library(testthat)
library(binomial)
test_check("binomial")
check_trials(5.4)
# test check_success() function
test_that("test that check_success works",{
expect_true(check_success(2,5))
expect_error(check_success(10,5),'success cannot be greater than trials')
expect_error(check_success(1.1,2), 'invalid success value')
}
)
# test check_success() function
test_that("test that check_success works",{
expect_true(check_success(2,5))
expect_error(check_success(10,5),'success can not be greater than trials')
expect_error(check_success(1.1,2), 'invalid success value')
}
)
test_that("test that check_success works",{
expect_true(check_success(4,9))
expect_error(check_success(10,9),'success can not be greater than trials')
expect_error(check_success(2.3,3), 'invalid success value')
}
)
check_success()
# test check_success() function
test_that("test that check_success works",{
expect_true(check_success(4,9))
expect_error(check_success(10,9),'success can not be greater than trials')
expect_error(check_success(2.3,3), 'invalid success value')
expect_error(check_success(2,3.4), 'invalid success value')
}
test_that("test that check_success works",{
expect_true(check_success(4,9))
expect_length( check_success(3,5),1)
expect_error(check_success(10,9),'success can not be greater than trials')
expect_error(check_success(2.3,3), 'invalid success value')
}
)
test_that("test that check_success works",{
expect_true(check_success(4,9))
expect_length(check_success(3,5),1)
expect_error(check_success(10,9),'success can not be greater than trials')
expect_error(check_success(2.3,3), 'invalid success value')
}
)
library(binomial)
library(binomial)
aux_mean
library(binomial)
?binomial
library(binomial)
aux_mean
# private auxiliary function aux_mean() to compute the mean value
aux_mean <- function(trials, prob) {
aux_mean <- trials * prob
return(aux_mean)
}
# private auxiliary function aux_variance() to compute the variance value
aux_variance <- function(trials, prob) {
aux_variance <- trials * prob * (1 - prob)
return(aux_variance)
}
# private auxiliary function aux_mode() to measure the most likely number of success
aux_mode <- function(trials, prob) {
m <- trials * prob  + prob
if (m %% 1 == 0) {
aux_mode <- c(m, m-1)
return(aux_mode)
}else {
aux_mode <- as.integer(m)
return(aux_mode)
}
}
# private auxiliary function aux_skewness() to compute the measure of the asymmetry of the probability distribution of a random variable about its mean
aux_skewness <- function(trials, prob) {
aux_skewness <- (1 - 2 * prob) / sqrt(trials * prob * (1 - prob))
return(aux_skewness)
}
# private auxiliary function aux_kurtosis() to compute the  measure of the "tailedness" of the probability distribution of a random variable
aux_kurtosis <- function(trials, prob) {
aux_kurtosis <- (1 - 6 * prob * (1 - prob)) / (trials * prob * (1 - prob))
return(aux_kurtosis)
}
library(binomial)
library(binomial)
library(binomial)
devtools::document()
library(binomial)
